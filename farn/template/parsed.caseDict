/*---------------------------------*- C++ -*----------------------------------*\
filetype dictionary; coding utf-8; version 0.1; local --; purpose --;
\*----------------------------------------------------------------------------*/
#include '.\paramDict'
_environment
{
    libSource                 'C:\Users\fralum\Documents\SystemSimulation\repo\dnv-opensource\farn-demo\library';
}
systemStructure
{
    connections
    {
        minuend_to_difference
        {
            source
            {
                component        minuend;
                connector        minuend_output;
            }
            target
            {
                component        difference;
                connector        difference_input_minuend;
            }
        }
        subtrahend_to_difference
        {
            source
            {
                component        subtrahend;
                connector        subtrahend_output;
            }
            target
            {
                component        difference;
                connector        difference_input_subtrahend;
            }
        }
        dividend_to_quotient
        {
            source
            {
                component        dividend;
                connector        dividend_output;
            }
            target
            {
                component        quotient;
                connector        quotient_input_dividend;
            }
        }
        difference_to_divisor
        {
            source
            {
                component        difference;
                connector        difference_output;
            }
            target
            {
                component        quotient;
                connector        quotient_input_divisor;
            }
        }
    }
    components
    {
        difference
        {
            connectors
            {
                difference_input_minuend
                {
                    variable        difference.IN1;
                    type        input;
                }
                difference_input_subtrahend
                {
                    variable        difference.IN2;
                    type        input;
                }
                difference_output
                {
                    variable        difference.OUT;
                    type        output;
                }
            }
            fmu               difference.fmu;
        }
        quotient
        {
            connectors
            {
                quotient_input_dividend
                {
                    variable        quotient.IN1;
                    type        input;
                }
                quotient_input_divisor
                {
                    variable        quotient.IN2;
                    type        input;
                }
                quotient_output
                {
                    variable        quotient.OUT;
                    type        output;
                }
            }
            fmu               quotient.fmu;
        }
        minuend
        {
            connectors
            {
                minuend_output
                {
                    variable        constVal.OUT;
                    type        output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    start        102.0;
                }
            }
            fmu               constantVal.fmu;
        }
        subtrahend
        {
            connectors
            {
                subtrahend_output
                {
                    variable        constVal.OUT;
                    type        output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    start        88.0;
                }
            }
            fmu               constantVal.fmu;
        }
        dividend
        {
            connectors
            {
                dividend_output
                {
                    variable        constVal.OUT;
                    type        output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    start        10.0;
                }
            }
            fmu               constantVal.fmu;
        }
    }
}
run
{
    simulation
    {
        name                  farn_demo;
        startTime             0;
        stopTime              10;
        baseStepSize          0.01;
        algorithm             fixedStep;
    }
}
minuend                       102.0;
subtrahend                    88.0;
dividend                      10.0;
