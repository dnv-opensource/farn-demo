/*---------------------------------*- C++ -*----------------------------------*\
filetype dictionary; coding utf-8; version 0.1; local --; purpose --;
\*----------------------------------------------------------------------------*/
#include '.\paramDict'

_environment
{
    libSource                 'C:\Dev\farn-demo\library';  //adjust this path to point to the library folder containing the fmu's
    root                     .;
}
systemStructure
{
    connections
    {
        minuend_to_difference
        {
            source
            {
                component               minuend;
                connector               minuend_output;
            }
            target
            {
                component               difference;
                connector               difference_input_minuend;
            }
        }
        subtrahend_to_difference
        {
            source
            {
                component               subtrahend;
                connector               subtrahend_output;
            }
            target
            {
                component               difference;
                connector               difference_input_subtrahend;
            }
        }
        dividend_to_quotient
        {
            source
            {
                component               dividend;
                connector               dividend_output;
            }
            target
            {
                component               quotient;
                connector               quotient_input_dividend;
            }
        }
        difference_to_divisor
        {
            source
            {
                component               difference;
                connector               difference_output;
            }
            target
            {
                component               quotient;
                connector               quotient_input_divisor;
            }
        }
    }
    components
    {
        difference
        {
            connectors
            {
                difference_input_minuend
                {
                    variable            difference.IN1;
                    type                input;
                }
                difference_input_subtrahend
                {
                    variable            difference.IN2;
                    type                input;
                }
                difference_output
                {
                    variable            difference.OUT;
                    type                output;
                }
            }
            fmu                         difference.fmu;
        }
        quotient
        {
            connectors
            {
                quotient_input_dividend
                {
                    variable            quotient.IN1;
                    type                input;
                }
                quotient_input_divisor
                {
                    variable            quotient.IN2;
                    type                input;
                }
                quotient_output
                {
                    variable            quotient.OUT;
                    type                output;
                }

            }
            fmu                         quotient.fmu;
        }
        minuend
            {
            connectors
            {
                minuend_output
                {
                    variable            constVal.OUT;
                    type                output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    causality           parameter;
                    variability         fixed;
                    start               $minuend;
                }
            }
            fmu                         constantVal.fmu;
        }
        subtrahend
        {
            connectors
            {
                subtrahend_output
                {
                    variable            constVal.OUT;
                    type                output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    causality           parameter;
                    variability         fixed;
                    start               $subtrahend;
                }
            }
            fmu                         constantVal.fmu;
        }
        dividend
        {
            connectors
            {
                dividend_output
                {
                    variable            constVal.OUT;
                    type                output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    causality           parameter;
                    variability         fixed;
                    start               $dividend;
                }
            }
            fmu                         constantVal.fmu;
        }
    }
}
run
{
    simulation
    {
        name                  ospCaseBuilder_demo;
        startTime             0;
        stopTime              10;
        baseStepSize          0.01;
        algorithm                       fixedStep;
    }
}
